name: build

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

env:
  CARGO_TERM_COLOR: always

jobs:
  build-release:
    name: build-release
    permissions:
      contents: write
    strategy:
      matrix:
        build: [linux-x86_64, macos-x86_64, windows-x86_64-gnu]
        include:
          - build: linux-x86_64
            os: ubuntu-latest
            rust: nightly
            target: x86_64-unknown-linux-gnu
          - build: macos-x86_64
            os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin
          - build: windows-x86_64-gnu
            os: windows-latest
            rust: nightly-x86_64-gnu
            target: x86_64-pc-windows-gnu
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

        # Run build
      - name: install rustup
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup-init.sh
          sh rustup-init.sh -y --default-toolchain none
          rustup target add ${{ matrix.target }}

      - uses: msys2/setup-msys2@v2
        if: matrix.rust == 'nightly-x86_64-gnu'
        with:
          msystem: MINGW64
          update: true
          install: git mingw-w64-x86_64-toolchain  mingw-w64-x86_64-gcc mingw-w64-i686-gcc
      - name: Put MSYS2_MinGW64 on PATH
        shell: msys2 {0}
        run: export PATH=D:/a/_temp/msys/msys64/mingw64/bin:$PATH
        if: matrix.rust == 'nightly-x86_64-gnu'
      # - name: Add mingw64 to path for x86_64-gnu
      #   run: echo "D:/a/_temp/msys/msys64/mingw64/bin">>$GITHUB_PATH
      #   if: matrix.rust == 'nightly-x86_64-gnu'
      #   shell: bash

      - name: Prepare env for windows
        if: matrix.rust == 'nightly-x86_64-gnu'
        run: |
          # Add symlinks to the target-specific GNU sysroots for Clang
          New-Item -Path "C:\Program Files\LLVM\x86_64-w64-mingw32" -ItemType SymbolicLink -Value "C:\msys64\mingw64\x86_64-w64-mingw32"
          New-Item -Path "C:\Program Files\LLVM\i686-w64-mingw32" -ItemType SymbolicLink -Value "C:\msys64\mingw64\i686-w64-mingw32"
          # Add paths to GCC executables to PATH
          echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "C:\msys64\mingw32\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          # Configure CC_<target> environment variables
          echo "CC_x86_64_pc_windows_gnu=x86_64-w64-mingw32-gcc" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo "CC_i686_pc_windows_gnu=i686-w64-mingw32-gcc" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          # echo "HOST_CC=x86_64-w64-mingw32-gcc" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Build acts-server
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{matrix.target}} --verbose

      - name: build acts-cli
        shell: bash
        run: cargo build --release --target ${{matrix.target}} -p acts-cli --verbose
